/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface Contact
 */
export interface Contact {
  /**
   *
   * @type {string}
   * @memberof Contact
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Contact
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof Contact
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof Contact
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof Contact
   */
  birthday: string;
  /**
   *
   * @type {string}
   * @memberof Contact
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Contact
   */
  company: string;
}

/**
 * ContactControllerApi - axios parameter creator
 * @export
 */
export const ContactControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: async (
      contactId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("_delete", "contactId", contactId);
      const localVarPath = `/contacts/{contactId}`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {Contact} contact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      contact: Contact,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contact' is not null or undefined
      assertParamExists("create", "contact", contact);
      const localVarPath = `/contacts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        contact,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/contacts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} contactId
     * @param {Contact} contact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      contactId: string,
      contact: Contact,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("update", "contactId", contactId);
      // verify required parameter 'contact' is not null or undefined
      assertParamExists("update", "contact", contact);
      const localVarPath = `/contacts/{contactId}`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        contact,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ContactControllerApi - functional programming interface
 * @export
 */
export const ContactControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ContactControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async _delete(
      contactId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator._delete(
        contactId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {Contact} contact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      contact: Contact,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contact>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        contact,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async get(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Contact>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} contactId
     * @param {Contact} contact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      contactId: string,
      contact: Contact,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contact>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(
        contactId,
        contact,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ContactControllerApi - factory interface
 * @export
 */
export const ContactControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContactControllerApiFp(configuration);
  return {
    /**
     *
     * @param {string} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(contactId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        ._delete(contactId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {Contact} contact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(contact: Contact, options?: any): AxiosPromise<Contact> {
      return localVarFp
        .create(contact, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(options?: any): AxiosPromise<Array<Contact>> {
      return localVarFp
        .get(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} contactId
     * @param {Contact} contact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(
      contactId: string,
      contact: Contact,
      options?: any
    ): AxiosPromise<Contact> {
      return localVarFp
        .update(contactId, contact, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for _delete operation in ContactControllerApi.
 * @export
 * @interface ContactControllerApiDeleteRequest
 */
export interface ContactControllerApiDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof ContactControllerApiDelete
   */
  readonly contactId: string;
}

/**
 * Request parameters for create operation in ContactControllerApi.
 * @export
 * @interface ContactControllerApiCreateRequest
 */
export interface ContactControllerApiCreateRequest {
  /**
   *
   * @type {Contact}
   * @memberof ContactControllerApiCreate
   */
  readonly contact: Contact;
}

/**
 * Request parameters for update operation in ContactControllerApi.
 * @export
 * @interface ContactControllerApiUpdateRequest
 */
export interface ContactControllerApiUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof ContactControllerApiUpdate
   */
  readonly contactId: string;

  /**
   *
   * @type {Contact}
   * @memberof ContactControllerApiUpdate
   */
  readonly contact: Contact;
}

/**
 * ContactControllerApi - object-oriented interface
 * @export
 * @class ContactControllerApi
 * @extends {BaseAPI}
 */
export class ContactControllerApi extends BaseAPI {
  /**
   *
   * @param {ContactControllerApiDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public _delete(
    requestParameters: ContactControllerApiDeleteRequest,
    options?: AxiosRequestConfig
  ) {
    return ContactControllerApiFp(this.configuration)
      ._delete(requestParameters.contactId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ContactControllerApiCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public create(
    requestParameters: ContactControllerApiCreateRequest,
    options?: AxiosRequestConfig
  ) {
    return ContactControllerApiFp(this.configuration)
      .create(requestParameters.contact, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public get(options?: AxiosRequestConfig) {
    return ContactControllerApiFp(this.configuration)
      .get(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ContactControllerApiUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public update(
    requestParameters: ContactControllerApiUpdateRequest,
    options?: AxiosRequestConfig
  ) {
    return ContactControllerApiFp(this.configuration)
      .update(requestParameters.contactId, requestParameters.contact, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PublicControllerApi - axios parameter creator
 * @export
 */
export const PublicControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/public`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PublicControllerApi - functional programming interface
 * @export
 */
export const PublicControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PublicControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ping(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PublicControllerApi - factory interface
 * @export
 */
export const PublicControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PublicControllerApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: any): AxiosPromise<string> {
      return localVarFp
        .ping(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PublicControllerApi - object-oriented interface
 * @export
 * @class PublicControllerApi
 * @extends {BaseAPI}
 */
export class PublicControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicControllerApi
   */
  public ping(options?: AxiosRequestConfig) {
    return PublicControllerApiFp(this.configuration)
      .ping(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
